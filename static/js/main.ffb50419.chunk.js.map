{"version":3,"sources":["pages/Home.js","pages/Load.js","pages/libs/jLouvain.js","pages/Vr.js","Router.js","App.js","index.js"],"names":["Home","props","useState","file","setFile","changeFile","e","console","log","target","value","goToPage","history","push","onFullscreenchange","document","fullscreenElement","onFullscreenerror","event","useEffect","fullscreenEnabled","addEventListener","removeEventListener","type","name","onChange","checked","onClick","documentElement","requestFullscreen","then","Nodes","nodes","map","node","i","position","x","y","z","radius","color","Feedbacks","feedbacks","feedback","start","x1","y1","z1","end","x2","y2","z2","def","line","Load","n","sizeX","sizeY","sizeZ","maxRandomLinks","Array","fill","c","Math","random","floor","toString","forEach","links","_i","nodeId2","node2","build","background","camera","look-controls","gearvr-controls","id","hand-controls","laser-controls","raycaster","jLouvain","original_graph_nodes","original_graph_edges","partition_init","original_graph","make_set","array","set","d","Object","keys","obj_values","obj","vals","key","hasOwnProperty","get_degree_for_node","graph","neighbours","_assoc_mat","weight","neighbour","get_neighbours_of_node","get_edge_weight","node1","undefined","update_assoc_mat","edge","source","clone","temp","constructor","init_status","status","part","size","edges","get_graph_size","nodes_to_com","deg","Error","degrees","gdegrees","loops","internals","com","inc","__modularity","total_weight","result","in_degree","degree","pow","__neighcom","weights","neighbourcom","__insert","__remove","__renumber","dict","count","ret","new_values","new_value","__one_level","modif","nb_pass_done","cur_mod","new_mod","length","com_node","degc_totw","neigh_communities","best_com","best_increase","neigh_communities_entries","j","incr","induced_graph","partition","w_prec","partition_values","concat","com1","com2","edge_index","indexOf","add_edge_to_graph","core","dendogram","part_init","mod","status_list","current_graph","generate_dendogram","level","partition_at_level","nds","edgs","assoc_mat","edge_list","mat","make_assoc_mat","prttn","Vr","match","fgRef","useRef","graphData","setGraphData","maxTotal","setMaxTotal","params","rScale","useCallback","loadData","data","_maxTotal","total","logicToCreateCluster","from","users","find","fromUserID","to","toUserID","sent","received","link","l","node_ids","communities","maxCluster","_communities","cluster","max","rh","cervello","tmobile","demo","current","d3Force","d3","amount","getColor","ref","showNavInfo","controlType","enableNavigationControls","onNodeClick","onNodeRightClick","onNodeHover","prevNode","nodeVal","nodeLabel","nodeDesc","rec","nodeColor","linkColor","Router","exact","path","component","App","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ffb50419.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst Home = (props) => {\n  const [file, setFile] = useState('demo')\n\n  const changeFile = (e) => {\n    console.log('e', e.target.value)\n    setFile(e.target.value)\n  }\n\n  const goToPage = () => {\n    props.history.push('/vr/' + file)\n  }\n\n  const onClickFullScreen = () => {\n    console.log('onClickFullScreen')\n    document.documentElement.requestFullscreen().then(() => {\n      goToPage()\n    })\n  }\n  const onClickNormalScreen = () => {\n    console.log('onClickNormalScreen')\n    goToPage()\n  }\n\n  const onFullscreenchange = () => {\n    if (document.fullscreenElement) {\n      // fullscreen is activated\n      console.log('fullscreen activated')\n    } else {\n      // fullscreen is cancelled\n      console.log('fullscreen cancelled')\n    }\n  }\n  const onFullscreenerror = (event) => {\n    console.log('fullscreen error', event)\n  }\n\n  useEffect(() => {\n    const fullscreenEnabled = document.fullscreenEnabled\n    if (fullscreenEnabled) {\n      // supported\n      console.log('fullscreenEnabled', document.fullscreenEnabled)\n      document.addEventListener('fullscreenchange', onFullscreenchange)\n      document.addEventListener('fullscreenerror', onFullscreenerror)\n      return () => {\n        document.removeEventListener('fullscreenchange', onFullscreenchange)\n        document.removeEventListener('fullscreenerror', onFullscreenerror)\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"radio\"\n          value=\"demo\"\n          name=\"file\"\n          onChange={changeFile}\n          checked={file === 'demo'}\n        />\n        Demo\n        <input\n          type=\"radio\"\n          value=\"rh\"\n          name=\"file\"\n          onChange={changeFile}\n          checked={file === 'rh'}\n        />\n        Rh\n        <input\n          type=\"radio\"\n          value=\"cervello\"\n          name=\"file\"\n          onChange={changeFile}\n          checked={file === 'cervello'}\n        />\n        Cervello\n        <input\n          type=\"radio\"\n          value=\"tmobile\"\n          name=\"file\"\n          onChange={changeFile}\n          checked={file === 'tmobile'}\n        />\n        T-mobile\n      </div>\n      <div onClick={onClickFullScreen}>Click to full screen mode </div>\n      <div onClick={onClickNormalScreen}>Click to normal view</div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\n// import aframe from 'aframe'\n\nconst Nodes = (props) => {\n  const { nodes } = props\n\n  return nodes.map((node, i) => {\n    const position = `${node.x} ${node.y} ${node.z}`\n\n    return (\n      <a-sphere\n        key={i}\n        position={position}\n        radius={node.radius}\n        color={node.color}\n      ></a-sphere>\n    )\n  })\n}\n\nconst Feedbacks = (props) => {\n  const { feedbacks } = props\n\n  return feedbacks.map((feedback, i) => {\n    const start = `start: ${feedback.x1} ${feedback.y1} ${feedback.z1}`\n    const end = `end: ${feedback.x2} ${feedback.y2} ${feedback.z2}`\n    const color = `color: ${feedback.color}`\n\n    const def = `${start}; ${end}; ${color}`\n\n    //console.log('line', `${start}; ${end}; ${color}`)\n    return <a-entity key={i} line={def}></a-entity>\n  })\n}\n\nconst Load = (props) => {\n  // a-scene allow this:\n  // fog=\"type: linear; color: #000; near: 1; far: 5\"\n  // device-orientation-permission-ui=\"enabled: false\"  vr-mode-ui=\"enabled: false\"\n\n  const sizeX = 15\n  const sizeY = 15\n  const sizeZ = 15\n  const n = 100\n  const maxRandomLinks = 15\n\n  const build = ({ n, sizeX, sizeY, sizeZ, maxRandomLinks }) => {\n    const array = Array(n).fill({})\n\n    const nodes = array.map((c, i) => {\n      const x = (Math.random() - 0.5) * 2 * sizeX\n      const y = (Math.random() - 0.5) * 2 * sizeY\n      const z = (Math.random() - 0.5) * 2 * sizeZ\n\n      const radius = Math.random() / 4 + 0.2\n\n      let color = '#'\n      for (let x = 0; x < 6; x++) {\n        color += Math.floor(Math.random() * 16).toString(16)\n      }\n\n      return {\n        x,\n        y,\n        z,\n        radius,\n        color,\n      }\n    })\n\n    const feedbacks = []\n\n    nodes.forEach((node) => {\n      const links = Math.random() * maxRandomLinks\n      for (let _i = 0; _i < links; _i++) {\n        const nodeId2 = Math.floor(Math.random() * n)\n        const node2 = nodes[nodeId2]\n\n        feedbacks.push({\n          x1: node.x,\n          y1: node.y,\n          z1: node.z,\n          x2: node2.x,\n          y2: node2.y,\n          z2: node2.z,\n          color: node.color,\n        })\n      }\n    })\n    return {\n      nodes,\n      feedbacks,\n    }\n  }\n\n  const map = build({ n, sizeX, sizeY, sizeZ, maxRandomLinks })\n\n  console.log('map', map)\n  return (\n    <a-scene background=\"color: #000\">\n      <a-entity camera look-controls position=\"2 1.6 0\"></a-entity>\n\n      <a-entity gearvr-controls></a-entity>\n      <a-entity\n        id=\"leftHand\"\n        hand-controls=\"hand: left; handModelStyle: lowPoly; color: #ffcccc\"\n      ></a-entity>\n      <a-entity\n        id=\"rightHand\"\n        hand-controls=\"hand: right; handModelStyle: lowPoly; color: #ffcccc\"\n      ></a-entity>\n\n      <a-entity laser-controls=\"hand: left\"></a-entity>\n      <a-entity laser-controls=\"hand: right\"></a-entity>\n      <a-entity laser-controls raycaster=\"objects: .links; far: 5\"></a-entity>\n      <a-entity laser-controls line=\"color: red; opacity: 0.75\"></a-entity>\n\n      <Nodes nodes={map.nodes} />\n      <Feedbacks feedbacks={map.feedbacks} />\n    </a-scene>\n  )\n}\n\nexport default Load\n","// https://github.com/upphiminn/jLouvain/blob/master/src/jLouvain.js\nconst jLouvain = () => {\n  //Constants\n  var __PASS_MAX = -1\n  var __MIN = 0.0000001\n\n  //Local vars\n  var original_graph_nodes\n  var original_graph_edges\n  var original_graph = {}\n  var partition_init\n\n  //Helpers\n  const make_set = array => {\n    var set = {}\n    array.forEach(d => {\n      set[d] = true\n    })\n    return Object.keys(set)\n  }\n\n  const obj_values = obj => {\n    var vals = []\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        vals.push(obj[key])\n      }\n    }\n    return vals\n  }\n\n  const get_degree_for_node = (graph, node) => {\n    var neighbours = graph._assoc_mat[node]\n      ? Object.keys(graph._assoc_mat[node])\n      : []\n    var weight = 0\n    neighbours.forEach(neighbour => {\n      var value = graph._assoc_mat[node][neighbour] || 1\n      if (node === neighbour) value *= 2\n      weight += value\n    })\n    return weight\n  }\n\n  const get_neighbours_of_node = (graph, node) => {\n    if (typeof graph._assoc_mat[node] === 'undefined') return []\n\n    var neighbours = Object.keys(graph._assoc_mat[node])\n    return neighbours\n  }\n\n  const get_edge_weight = (graph, node1, node2) => {\n    return graph._assoc_mat[node1] ? graph._assoc_mat[node1][node2] : undefined\n  }\n\n  const get_graph_size = graph => {\n    var size = 0\n    graph.edges.forEach(edge => {\n      size += edge.weight\n    })\n    return size\n  }\n\n  const add_edge_to_graph = (graph, edge) => {\n    update_assoc_mat(graph, edge)\n\n    var edge_index = graph.edges\n      .map(d => {\n        return d.source + '_' + d.target\n      })\n      .indexOf(edge.source + '_' + edge.target)\n\n    if (edge_index !== -1) graph.edges[edge_index].weight = edge.weight\n    else graph.edges.push(edge)\n  }\n\n  const make_assoc_mat = edge_list => {\n    var mat = {}\n    edge_list.forEach(edge => {\n      mat[edge.source] = mat[edge.source] || {}\n      mat[edge.source][edge.target] = edge.weight\n      mat[edge.target] = mat[edge.target] || {}\n      mat[edge.target][edge.source] = edge.weight\n    })\n\n    return mat\n  }\n\n  const update_assoc_mat = (graph, edge) => {\n    graph._assoc_mat[edge.source] = graph._assoc_mat[edge.source] || {}\n    graph._assoc_mat[edge.source][edge.target] = edge.weight\n    graph._assoc_mat[edge.target] = graph._assoc_mat[edge.target] || {}\n    graph._assoc_mat[edge.target][edge.source] = edge.weight\n  }\n\n  const clone = obj => {\n    if (obj === null || typeof obj !== 'object') return obj\n\n    var temp = obj.constructor()\n\n    for (var key in obj) temp[key] = clone(obj[key])\n    return temp\n  }\n\n  //Core-Algorithm Related\n  const init_status = (graph, status, part) => {\n    status['nodes_to_com'] = {}\n    status['total_weight'] = 0\n    status['internals'] = {}\n    status['degrees'] = {}\n    status['gdegrees'] = {}\n    status['loops'] = {}\n    status['total_weight'] = get_graph_size(graph)\n\n    if (typeof part === 'undefined') {\n      graph.nodes.forEach((node, i) => {\n        status.nodes_to_com[node] = i\n        var deg = get_degree_for_node(graph, node)\n        if (deg < 0) throw new Error('Bad graph type, use positive weights!')\n        status.degrees[i] = deg\n        status.gdegrees[node] = deg\n        status.loops[node] = get_edge_weight(graph, node, node) || 0\n        status.internals[i] = status.loops[node]\n      })\n    } else {\n      graph.nodes.forEach(node => {\n        var com = part[node]\n        status.nodes_to_com[node] = com\n        var deg = get_degree_for_node(graph, node)\n        status.degrees[com] = (status.degrees[com] || 0) + deg\n        status.gdegrees[node] = deg\n        var inc = 0.0\n\n        var neighbours = get_neighbours_of_node(graph, node)\n        neighbours.forEach(neighbour => {\n          var weight = graph._assoc_mat[node][neighbour]\n          if (weight <= 0) {\n            throw new Error('Bad graph type, use positive weights')\n          }\n\n          if (part[neighbour] === com) {\n            if (neighbour === node) {\n              inc += weight\n            } else {\n              inc += weight / 2.0\n            }\n          }\n        })\n        status.internals[com] = (status.internals[com] || 0) + inc\n      })\n    }\n  }\n\n  const __modularity = status => {\n    var links = status.total_weight\n    var result = 0.0\n    var communities = make_set(obj_values(status.nodes_to_com))\n\n    communities.forEach(com => {\n      var in_degree = status.internals[com] || 0\n      var degree = status.degrees[com] || 0\n      if (links > 0) {\n        result =\n          result + in_degree / links - Math.pow(degree / (2.0 * links), 2)\n      }\n    })\n    return result\n  }\n\n  const __neighcom = (node, graph, status) => {\n    // compute the communities in the neighb. of the node, with the graph given by\n    // node_to_com\n\n    var weights = {}\n    var neighboorhood = get_neighbours_of_node(graph, node) //make iterable;\n\n    neighboorhood.forEach(neighbour => {\n      if (neighbour !== node) {\n        var weight = graph._assoc_mat[node][neighbour] || 1\n        var neighbourcom = status.nodes_to_com[neighbour]\n        weights[neighbourcom] = (weights[neighbourcom] || 0) + weight\n      }\n    })\n\n    return weights\n  }\n\n  const __insert = (node, com, weight, status) => {\n    //insert node into com and modify status\n    status.nodes_to_com[node] = +com\n    status.degrees[com] =\n      (status.degrees[com] || 0) + (status.gdegrees[node] || 0)\n    status.internals[com] =\n      (status.internals[com] || 0) + weight + (status.loops[node] || 0)\n  }\n\n  const __remove = (node, com, weight, status) => {\n    //remove node from com and modify status\n    status.degrees[com] =\n      (status.degrees[com] || 0) - (status.gdegrees[node] || 0)\n    status.internals[com] =\n      (status.internals[com] || 0) - weight - (status.loops[node] || 0)\n    status.nodes_to_com[node] = -1\n  }\n\n  const __renumber = dict => {\n    var count = 0\n    var ret = clone(dict) //deep copy :)\n    var new_values = {}\n    var dict_keys = Object.keys(dict)\n    dict_keys.forEach(key => {\n      var value = dict[key]\n      var new_value =\n        typeof new_values[value] === 'undefined' ? -1 : new_values[value]\n      if (new_value === -1) {\n        new_values[value] = count\n        new_value = count\n        count = count + 1\n      }\n      ret[key] = new_value\n    })\n    return ret\n  }\n\n  const __one_level = (graph, status) => {\n    //Compute one level of the Communities Dendogram.\n    let modif = true,\n      nb_pass_done = 0,\n      cur_mod = __modularity(status),\n      new_mod = cur_mod\n\n    while (modif && nb_pass_done !== __PASS_MAX) {\n      cur_mod = new_mod\n      modif = false\n      nb_pass_done += 1\n\n      for (let i = 0; i < graph.nodes.length; i++) {\n        let node = graph.nodes[i]\n        var com_node = status.nodes_to_com[node]\n        var degc_totw =\n          (status.gdegrees[node] || 0) / (status.total_weight * 2.0)\n        var neigh_communities = __neighcom(node, graph, status)\n        __remove(node, com_node, neigh_communities[com_node] || 0.0, status)\n        var best_com = com_node\n        var best_increase = 0\n        var neigh_communities_entries = Object.keys(neigh_communities) //make iterable;\n\n        for (let j = 0; j < neigh_communities_entries.length; j++) {\n          let com = neigh_communities_entries[j]\n          var incr =\n            neigh_communities[com] - (status.degrees[com] || 0.0) * degc_totw\n          if (incr > best_increase) {\n            best_increase = incr\n            best_com = com\n          }\n        }\n\n        __insert(node, best_com, neigh_communities[best_com] || 0, status)\n\n        if (best_com !== com_node) modif = true\n      }\n      new_mod = __modularity(status)\n      if (new_mod - cur_mod < __MIN) break\n    }\n  }\n\n  const induced_graph = (partition, graph) => {\n    var ret = { nodes: [], edges: [], _assoc_mat: {} }\n    var w_prec, weight\n    //add nodes from partition values\n    var partition_values = obj_values(partition)\n    ret.nodes = ret.nodes.concat(make_set(partition_values)) //make set\n    graph.edges.forEach(edge => {\n      weight = edge.weight || 1\n      var com1 = partition[edge.source]\n      var com2 = partition[edge.target]\n      w_prec = get_edge_weight(ret, com1, com2) || 0\n      var new_weight = w_prec + weight\n      add_edge_to_graph(ret, { source: com1, target: com2, weight: new_weight })\n    })\n    return ret\n  }\n\n  const partition_at_level = (dendogram, level) => {\n    var partition = clone(dendogram[0])\n    for (let i = 1; i < level + 1; i++)\n      Object.keys(partition).forEach(key => {\n        var node = key\n        var com = partition[key]\n        partition[node] = dendogram[i][com]\n      })\n    return partition\n  }\n\n  const generate_dendogram = (graph, part_init) => {\n    if (graph.edges.length === 0) {\n      var part = {}\n      graph.nodes.forEach(node => {\n        part[node] = node\n      })\n      return part\n    }\n    var status = {}\n\n    init_status(original_graph, status, part_init)\n    var mod = __modularity(status)\n    var status_list = []\n    __one_level(original_graph, status)\n    var new_mod = __modularity(status)\n    var partition = __renumber(status.nodes_to_com)\n    status_list.push(partition)\n    mod = new_mod\n    var current_graph = induced_graph(partition, original_graph)\n    init_status(current_graph, status)\n\n    while (true) {\n      __one_level(current_graph, status)\n      new_mod = __modularity(status)\n      if (new_mod - mod < __MIN) break\n\n      partition = __renumber(status.nodes_to_com)\n      status_list.push(partition)\n\n      mod = new_mod\n      current_graph = induced_graph(partition, current_graph)\n      init_status(current_graph, status)\n    }\n\n    return status_list\n  }\n\n  var core = () => {\n    var dendogram = generate_dendogram(original_graph, partition_init)\n    console.log('original_graph', original_graph)\n    return partition_at_level(dendogram, dendogram.length - 1)\n  }\n\n  core.nodes = nds => {\n    original_graph_nodes = nds\n    return core\n  }\n\n  core.edges = edgs => {\n    if (typeof original_graph_nodes === 'undefined')\n      throw new Error('Please provide the graph nodes first!')\n\n    original_graph_edges = edgs\n    var assoc_mat = make_assoc_mat(edgs)\n    original_graph = {\n      nodes: original_graph_nodes,\n      edges: original_graph_edges,\n      _assoc_mat: assoc_mat\n    }\n    return core\n  }\n\n  core.partition_init = prttn => {\n    partition_init = prttn\n    return core\n  }\n\n  return core\n}\n\nexport default jLouvain\n","import React, { useEffect, useRef, useState, useCallback } from 'react'\nimport * as d3 from 'd3'\nimport {\n  ForceGraph2D,\n  ForceGraph3D,\n  ForceGraphVR,\n  ForceGraphAR,\n} from 'react-force-graph'\nimport jLouvain from './libs/jLouvain'\nimport forceInABox from './libs/forceInABox'\n\nimport { demo, rh, cervello, tmobile } from './json/'\n\nconst MIN = 10\nconst MAX = 100\n\nconst Vr = (props) => {\n  const { match } = props\n  const fgRef = useRef()\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] })\n  const [maxTotal, setMaxTotal] = useState(0)\n\n  const file = match.params.file\n\n  const rScale = useCallback(\n    (value) => {\n      const scale = (value * (MAX - MIN)) / maxTotal + MIN\n      return scale\n    },\n    [maxTotal]\n  )\n\n  useEffect(() => {\n    const loadData = (data) => {\n      let _maxTotal = { total: 0 }\n      const links = []\n      data.feedbacks.forEach((feedback) => {\n        const weight = logicToCreateCluster(feedback)\n        const from = data.users.find((node) => node.id === feedback.fromUserID)\n        const to = data.users.find((node) => node.id === feedback.toUserID)\n        if (from) {\n          from.sent =\n            typeof from.sent === 'undefined' ? weight : from.sent + weight\n          from.total =\n            typeof from.total === 'undefined' ? weight : from.total + weight\n\n          if (from.total > _maxTotal.total) {\n            _maxTotal = from\n          }\n        }\n        if (to) {\n          to.received =\n            typeof to.received === 'undefined' ? weight : to.received + weight\n          to.total =\n            typeof to.total === 'undefined' ? weight : to.total + weight\n          if (to.total > _maxTotal.total) {\n            _maxTotal = to\n          }\n        }\n\n        const id = `${feedback.fromUserID}_${feedback.toUserID}`\n\n        const link = links.find((l) => l.id === id)\n\n        if (link) {\n          link.weight += weight\n        } else {\n          links.push({\n            id,\n            source: feedback.fromUserID,\n            target: feedback.toUserID,\n            weight,\n          })\n        }\n      })\n\n      const node_ids = data.users.map((n) => n.id)\n\n      var communities = jLouvain().nodes(node_ids).edges(links)()\n\n      var maxCluster = 0\n      const _communities = []\n      Object.keys(communities).forEach((key) => {\n        const cluster = communities[key]\n        maxCluster = Math.max(maxCluster, cluster)\n\n        if (typeof _communities[cluster] !== 'undefined') {\n          _communities[cluster]++\n        } else {\n          _communities[cluster] = 1\n        }\n\n        data.users = data.users.map((n) => {\n          return n.id !== key\n            ? n\n            : {\n                ...n,\n                cluster,\n              }\n        })\n\n        setGraphData({\n          links,\n          nodes: data.users,\n        })\n      })\n      console.log('max node', _maxTotal)\n      setMaxTotal(_maxTotal.total)\n\n      console.log('clusters found', _communities)\n      console.log('data', {\n        links,\n        nodes: data.users,\n      })\n    }\n\n    switch (file) {\n      case 'rh':\n        loadData(rh)\n        break\n      case 'cervello':\n        loadData(cervello)\n        break\n      case 'tmobile':\n        loadData(tmobile)\n        break\n      default:\n        loadData(demo)\n        break\n    }\n  }, [file])\n\n  useEffect(() => {\n    const fg = fgRef.current\n\n    // // Deactivate existing forces\n    // fg.d3Force('center', null)\n    // fg.d3Force('charge', null)\n\n    // // Add collision and bounding box forces\n    fg.d3Force(\n      'collide',\n      d3.forceCollide((d) => {\n        //console.log('forceCollide', rScale(d.total))\n        return rScale(d.total) / 2\n      })\n    )\n    // fg.d3Force('box', () => {\n    //   const SQUARE_HALF_SIDE = data.users.length * 2\n\n    //   data.users.forEach((node) => {\n    //     const x = node.x || 0,\n    //       y = node.y || 0\n\n    //     // bounce on box walls\n    //     if (Math.abs(x) > SQUARE_HALF_SIDE) {\n    //       node.vx *= -1\n    //     }\n    //     if (Math.abs(y) > SQUARE_HALF_SIDE) {\n    //       node.vy *= -1\n    //     }\n    //   })\n    // })\n  }, [rScale])\n\n  const logicToCreateCluster = (link) => {\n    /*\n    1\n    link.numFeedbacks \n    link.amount\n    link.amount * link.numFeedbacks\n    */\n    return link.amount\n  }\n  const getColor = (color) => {\n    const range = [\n      '#4f92ff',\n      '#4fffc1',\n      '#4ff0ff',\n      '#ff3021',\n      '#84ff3d',\n      '#4f90ff',\n      '#ff3021',\n      '#3dff71',\n      '#84ff3d',\n      '#00eeff',\n      '#f2ff3d',\n      '#38ffc3',\n      '#ff69d7',\n      '#f5bb3d',\n      '#fcff4f',\n      '#ea4fff',\n      '#ff4fa1',\n      '#fa2828',\n      '#c7c7c7',\n      '#a8925b',\n      '#58ad6f',\n      '#00ff45',\n      '#00c8ff',\n      'slateblue',\n    ]\n\n    const _color = color % 25\n\n    return range[_color]\n  }\n\n  const onNodeClick = (node, event) => {\n    console.log('onNodeClick', { node, event })\n  }\n  const onNodeRightClick = (node, event) => {\n    console.log('onNodeRightClick', { node, event })\n  }\n  const onNodeHover = (node, prevNode) => {\n    console.log('onNodeHover', { node, prevNode })\n  }\n\n  return (\n    <ForceGraphVR\n      ref={fgRef}\n      graphData={graphData}\n      showNavInfo={false}\n      controlType=\"orbit\"\n      enableNavigationControls={true}\n      onNodeClick={onNodeClick}\n      onNodeRightClick={onNodeRightClick}\n      onNodeHover={onNodeHover}\n      nodeVal={(d) => {\n        return rScale(d.total)\n      }}\n      nodeLabel={(d) => d.name}\n      nodeDesc={(d) => {\n        const rec = d.received ? d.received : 0\n        const sent = d.sent ? d.sent : 0\n        const total = d.total ? d.total : 0\n        return `Rec: ${rec}, Sent: ${sent}, Total: ${total}`\n      }}\n      nodeColor={(d) => getColor(d.cluster)}\n      linkColor={(d) => {\n        const from = graphData.nodes.find((node) => node.id === d.source)\n        const to = graphData.nodes.find((node) => node.id === d.target)\n        if (from && to && from.cluster === to.cluster) {\n          return getColor(from.cluster)\n        } else {\n          return 'gray'\n        }\n      }}\n    />\n  )\n}\n\nexport default Vr\n","import { Home, Load, Vr } from './pages'\nimport {\n  HashRouter as AppRouter,\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom'\nconst Router = (props) => {\n  return (\n    <AppRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} {...props} />\n        <Route path=\"/load\" component={Load} {...props} />\n        <Route path=\"/vr/:file\" component={Vr} {...props} />\n      </Switch>\n    </AppRouter>\n  )\n}\n\nexport default Router\n","import './App.css'\n\nimport Router from './Router'\n\nconst App = () => {\n  return <Router />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nif (document.getElementById('root')) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n"],"sourceRoot":""}